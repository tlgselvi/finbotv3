# FinBot v3 - Docker Compose Configuration
# Production-like local development environment

version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:16-alpine
    container_name: finbot-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: finbot_dev
      POSTGRES_USER: finbot_user
      POSTGRES_PASSWORD: finbot_pass_2024
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --lc-collate=tr_TR.UTF-8 --lc-ctype=tr_TR.UTF-8"
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-db.sql:/docker-entrypoint-initdb.d/init.sql:ro
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U finbot_user -d finbot_dev"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - finbot-network

  # Redis Cache (Optional - for future use)
  redis:
    image: redis:7-alpine
    container_name: finbot-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - finbot-network

  # FinBot Application
  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: finbot-app
    restart: unless-stopped
    ports:
      - "5000:5000"
    environment:
      # Database
      DATABASE_URL: postgresql://finbot_user:finbot_pass_2024@postgres:5432/finbot_dev
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: finbot_dev
      DB_USER: finbot_user
      DB_PASSWORD: finbot_pass_2024
      
      # Redis (Optional)
      REDIS_URL: redis://redis:6379
      
      # Application
      NODE_ENV: production
      PORT: 5000
      API_PORT: 5000
      
      # JWT & Security
      JWT_SECRET: your-super-secret-jwt-key-change-in-production
      BCRYPT_ROUNDS: 10
      
      # CORS
      CORS_ORIGIN: http://localhost:5000
      
      # Features
      ENABLE_ALERTS: "true"
      ENABLE_NOTIFICATIONS: "true"
      ENABLE_MONTE_CARLO: "true"
      ENABLE_SCENARIOS: "true"
      ENABLE_REPORTS: "true"
      
      # Logging
      LOG_LEVEL: info
      
      # Rate Limiting
      RATE_LIMIT_WINDOW: 15
      RATE_LIMIT_MAX: 100
      
      # Turkish Settings
      DEFAULT_CURRENCY: TRY
      VAT_RATE: 0.20
      SGK_RATE: 0.15
      
      # Performance
      MAX_CONCURRENT_REQUESTS: 100
      REQUEST_TIMEOUT: 30000
      CACHE_TTL: 3600
      
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:5000/api/health', (r) => {process.exit(r.statusCode === 200 ? 0 : 1)})"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - finbot-network
    volumes:
      # Logs
      - ./logs:/app/logs

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  finbot-network:
    driver: bridge

